generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "../node_modules/.prisma/client"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

// NextAuth Required Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Main Application Models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  phone         String?
  city          String?
  state         String?
  userType      UserType  @default(CLIENT)
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  accounts         Account[]
  sessions         Session[]
  serviceProvider  ServiceProvider?
  reviews          Review[]
  
  @@map("users")
}

model ServiceCategory {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  icon        String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  
  // Relations
  serviceProviders ServiceProvider[]
  
  @@map("service_categories")
}

model ServiceProvider {
  id              String          @id @default(cuid())
  userId          String          @unique
  categoryId      String
  businessName    String?
  description     String?
  experience      String?
  certifications  String?
  workingHours    String?
  serviceAreas    String?
  priceRange      String?
  images          String?
  isVerified      Boolean         @default(false)
  isActive        Boolean         @default(true)
  hasPendingPayment Boolean       @default(false)
  totalJobs       Int             @default(0)
  avgRating       Float           @default(0)
  totalReviews    Int             @default(0)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  // Relations
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  category        ServiceCategory @relation(fields: [categoryId], references: [id])
  reviews         Review[]
  availability    Availability[]
  clientRecords   ClientRecord[]
  
  @@map("service_providers")
}

model Review {
  id                String          @id @default(cuid())
  userId            String
  serviceProviderId String
  rating            Int             @default(1) // 1-5 stars
  comment           String?
  jobDescription    String?
  isVerified        Boolean         @default(false)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  
  // Relations
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  serviceProvider   ServiceProvider @relation(fields: [serviceProviderId], references: [id], onDelete: Cascade)
  
  @@unique([userId, serviceProviderId])
  @@map("reviews")
}

model Availability {
  id                String          @id @default(cuid())
  serviceProviderId String
  dayOfWeek         Int             // 0-6 (Sunday-Saturday)
  startTime         String          // HH:MM format
  endTime           String          // HH:MM format
  isAvailable       Boolean         @default(true)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  
  // Relations
  serviceProvider   ServiceProvider @relation(fields: [serviceProviderId], references: [id], onDelete: Cascade)
  
  @@map("availability")
}

model Advertisement {
  id          String      @id @default(cuid())
  title       String
  description String?
  imageUrl    String?
  linkUrl     String?
  company     String
  position    AdPosition  @default(BANNER)
  isActive    Boolean     @default(true)
  startDate   DateTime
  endDate     DateTime
  clicks      Int         @default(0)
  impressions Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@map("advertisements")
}

model ContactForm {
  id          String      @id @default(cuid())
  name        String
  email       String
  phone       String?
  subject     String
  message     String
  status      FormStatus  @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@map("contact_forms")
}

// Enums
enum UserType {
  CLIENT
  SERVICE_PROVIDER
  ADMIN
}

enum AdPosition {
  BANNER
  SIDEBAR
  FOOTER
}

enum FormStatus {
  PENDING
  RESPONDED
  CLOSED
}


model ClientRecord {
  id                String          @id @default(cuid())
  serviceProviderId String
  clientName        String
  clientEmail       String?
  clientPhone       String?
  serviceType       String
  value             Float
  datePerformed     DateTime        @default(now())
  
  // Relations
  serviceProvider   ServiceProvider @relation(fields: [serviceProviderId], references: [id], onDelete: Cascade)

  @@map("client_records")
}

